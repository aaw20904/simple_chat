<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link  rel="stylesheet"  href="/css/bootstrap.min.css">
    <script src="/js/bootstrap.bundle.min.js" type="text/javascript"></script>
    <title>Document</title>
</head>
<body>
    <div class="copntainer">
        <div class="h3" id="uniqueNumber">
            <%-text %>
        </div>
        <button class="btn btn-primary debug_button" type="button">Click me</button>
         <button class="btn btn-primary debug_button1" type="button">Echo</button>
    </div>

    <script>
    const SESSION_IDENTIFIER_COOKIE = 'sessionInfo'
    const LAST_URL_COOKIE = 'lastURL';
 /*
 
    1)separate each key-value pair using String.prototype.split(';')
    2)Use Array.prototype.map() and String.prototype.split('=') to separate keys from values in each pair.
    3)Use Array.prototype.reduce() and decodeURIComponent() to create an object with all key-value pairs.

 */

    window.onload = async function() {
       
        let cookieId;
        let cookieMgr = new CookieManager(); 
        let networkMgr = new NetworkInteractor(cookieMgr, (x,y)=>console.log(x,y), null);
        await networkMgr.connectWs();
        let btn = document.querySelector('.debug_button');
        btn.onclick = async () =>{
            await networkMgr.registerNewSocketCommand()
        }
   }

    class CookieManager {
        #readAllTheCookies(){
                //get all the string 
            let cookiesString = String(document.cookie);
            //clean all the spaces
            cookiesString = cookiesString.replace(/\s/g, '');
            //split
            let splited = cookiesString.split(';');
            console.log(splited);
            //create a map
            let cookiesMap = new Map();
            //iterate an array and split into key/value
            splited.forEach((val)=>{
                let pair = val.split('=');
                //key [0], value[1]
                cookiesMap.set(pair[0], pair[1]);
            });
            return cookiesMap;
        }
    //returns a Map()
        readCookiesMap () {
            return this.#readAllTheCookies();
        }

        readCookie (key) {
            let m = this.#readAllTheCookies();
            return m.get(key);
        }

        writeCookie (key, value) {
           let cookieMap = this.#readAllTheCookies();
            cookieMap.set(key, value);
            let rawString = '';
            cookieMap.forEach((v, k)=>{
                 document.cookie = `${k}=${v};SameSite=None;Secure;`;
            });
           
        }
    }

 


//interaction with WebSocket interface
/*
Location.href --

    A stringifier that returns a string containing the entire URL. If changed, the associated document navigates to the new page. It can be set from a different origin than the associated document.
Location.protocol

    A string containing the protocol scheme of the URL, including the final ':'.
Location.host --

    A string containing the host, that is the hostname, a ':', and the port of the URL.
Location.hostname --

    A string containing the domain of the URL.
Location.port

    A string containing the port number of the URL.
Location.pathname --

    A string containing an initial '/' followed by the path of the URL, not including the query string or fragment.

*/

class NetworkInteractor {
    #cookieMgr;
    #webSocket = null;
    #baseWsUrl;
    #baseHttpUrl;
    #msgFunction;
    #currHostName;
    #chatInstance;

        constructor (cookieMgrInst, msgFunction, chatInstance) {
            this.#msgFunction = msgFunction;
            this.#cookieMgr = cookieMgrInst;
            this.#chatInstance = chatInstance;
            
            ///get url`s;
            let currentUrl = new URL(document.location);
            this.#currHostName = currentUrl.host;
            this.#baseHttpUrl = `${currentUrl.protocol}//${currentUrl.host}${currentUrl.pathname}`;
            this.#baseWsUrl = this.#baseWsUrl = `ws://${currentUrl.hostname}/:8080`;
    }

    //a respons from server when register;
    
    #registrWsServerComm = (rsp) =>{
       if (rsp.status) {
        //when success
          if (rsp.cookie) {
            //when a cokie needs to be updated
            this.#cookieMgr.writeCookie(SESSION_IDENTIFIER_COOKIE, rsp.cookie);
            this.#msgFunction(true,`Cookie updated ${rsp.cookie}`);
          }
          //report on success
          this.#msgFunction(true,'User registered successfully!')
       } else {
        //report on error
        this.#msgFunction(false,rsp.msg);
        return;
        
      
        }
    };

    #loginWsServerComm = (rsp) => {
       //report that a user redirect to log in
      this.#msgFunction(false,'You must to login.You will redirect after several seconds');
       //save current position in cookie
       this.#cookieMgr.writeCookie(LAST_URL_COOKIE,this.#baseHttpUrl);
       ///redirect to the Log In page
          window.setTimeout(()=>{
                    window.location.replace(`http://${this.#currHostName}/login`);
                  }, 3000);
    };

    #br_castWsServerComm = (rsp) =>{

    };
    #updateWsServerComm = (rsp) =>{

    };
    #get_chatWsServerComm = (rsp) =>{

    };
    
    #ask_crdWsServerComm = (rsp) =>{

    };
    #send_msgWsServerComm = (rsp) =>{

    };
    

  /***base WS event handler***/
    #onWsMessage =  (evt) => {
       let msg = JSON.parse(evt.data);
        switch(msg.command){
            case 'registr':
               this.#registrWsServerComm(msg);
            break;
            case 'login':
              this.#loginWsServerComm(msg);
            break;
            default:

        }
    };

    #onWsClose = (evt) => {
        this.#msgFunction(false,`WS Coonection closed`);
    };

    #onWsError = (evt) => {
        this.#msgFunction(false,`ws connection error! ${evt}`);
    };



    async connectWs (wsUrl=null) {

        if (!wsUrl) {
            this.#baseWsUrl = `ws://${this.#currHostName}:8080`;
        }
        //try to connect
        this.#webSocket =  await new Promise((resolve, reject) => {
                                let socket = new WebSocket(this.#baseWsUrl );
                                // 
                                socket.addEventListener("open", () => {
                                    resolve(socket);
                                });
                            }); 
         //add isteners
         this.#webSocket.addEventListener('message', this.#onWsMessage);
         this.#webSocket.addEventListener('close', this.#onWsClose);
         this.#webSocket.addEventListener('error', this.#onWsError);

    }

    async registerNewSocketCommand(){
        return new Promise((resolve, reject) => {
            //get auth cookie 'ticket'
            let ticket = this.#cookieMgr.readCookie('sessionInfo');
            if (!ticket) {
                ticket = 0;
            }
            //try to register on remote WS server
            let registerCommand = {command:'registr',cookie:ticket};
            //start sending a message to the server
            this.#webSocket.send(JSON.stringify(registerCommand));
            //send a request and waiting until it has been transmitted
           
           
             resolve();
            //NOTE: a command processing WHEN a response has been arrived -  in 'onWsMessage' listener

        });
    }

}

    </script>
</body>
</html>